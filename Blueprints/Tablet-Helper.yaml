blueprint:
  name: üì± Tablet Maintenance & Control
  description: >
    üìã Handles charging, screen control, and weekly maintenance for wall-mounted tablets used as smart home dashboards.
    ‚ö° Supports both `switch` (Fully Kiosk) and `light` (BrowserMod) for screen control.
    üîã Regulates charging based on customizable battery percentage thresholds.
    üîÅ Restarts tablet weekly if the room is empty, and notifies if the device goes offline.

  domain: automation
  input:
    battery_sensor:
      name: üîã Battery Sensor
      description: Sensor that provides battery level (in %)
      selector:
        entity:
          domain: sensor

    charger_switch:
      name: üîå Charger Switch
      description: Switch that turns the tablet charging on or off
      selector:
        entity:
          domain: switch

    screen_control:
      name: üñ•Ô∏è Screen Control (Switch or Light)
      description: Entity to control the screen (Fully Kiosk = switch, BrowserMod = light)
      selector:
        entity:
          domain:
            - switch
            - light

    presence_sensor:
      name: üö∂ Presence Sensor
      description: Presence sensor for the room (e.g. mmWave, motion)
      selector:
        entity:
          domain: binary_sensor
          device_class: presence

    restart_button:
      name: üîÅ Restart Button
      description: Button entity that triggers a restart (e.g. Fully Kiosk restart command)
      selector:
        entity:
          domain: button

    notify_device:
      name: üì± Mobile Device for Notifications
      description: Mobile device to receive notifications (via HA Companion app)
      selector:
        device:
          integration: mobile_app

    battery_min:
      name: üîã Minimum Battery %
      description: Start charging if battery is below this value
      default: 35
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    battery_max:
      name: üîã Maximum Battery %
      description: Stop charging if battery is above this value
      default: 75
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    notify_title:
      name: üì® Notification Title
      description: Customize the title of the alert when the tablet goes offline
      default: "üìµ Tablet Offline"

    notify_message:
      name: üí¨ Notification Message
      description: Customize the message. Use `{{ devicename }}` to insert the tablet's name.
      default: "{{ devicename }} is unavailable. Please check the tablet."

mode: single

variables:
  devicename: >-
    {% set eid = trigger.entity_id if trigger is defined else '' %}
    {{ states[eid].name if eid in states else 'Tablet' }}

trigger:
  - platform: time_pattern
    minutes: "/15"
    id: Battery Check

  - platform: state
    entity_id: !input presence_sensor
    from: "on"
    to: "off"
    for: "00:00:30"
    id: Screen off

  - platform: state
    entity_id: !input presence_sensor
    from: "off"
    to: "on"
    id: Screen on

  - platform: time
    at: "03:00:00"
    id: Restart device

  - platform: state
    entity_id: !input screen_control
    to: "unavailable"
    for: "00:10:00"
    id: Device unavailable notification

condition: []

action:
  - alias: üîã Battery charging control
    choose:
      - conditions:
          - condition: trigger
            id: Battery Check
          - condition: state
            entity_id: !input charger_switch
            state: "on"
          - condition: numeric_state
            entity_id: !input battery_sensor
            above: !input battery_max
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch

      - conditions:
          - condition: trigger
            id: Battery Check
          - condition: state
            entity_id: !input charger_switch
            state: "off"
          - condition: numeric_state
            entity_id: !input battery_sensor
            below: !input battery_min
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input charger_switch

  - alias: üñ•Ô∏è Screen control based on presence
    choose:
      - conditions:
          - condition: trigger
            id: Screen off
          - condition: state
            entity_id: !input screen_control
            state: "on"
          - condition: state
            entity_id: !input presence_sensor
            state: "off"
        sequence:
          - service: >
              {% if states[inputs.screen_control].domain == 'light' %}
                light.turn_off
              {% else %}
                switch.turn_off
              {% endif %}
            target:
              entity_id: !input screen_control

      - conditions:
          - condition: trigger
            id: Screen on
          - condition: state
            entity_id: !input screen_control
            state: "off"
          - condition: state
            entity_id: !input presence_sensor
            state: "on"
        sequence:
          - service: >
              {% if states[inputs.screen_control].domain == 'light' %}
                light.turn_on
              {% else %}
                switch.turn_on
              {% endif %}
            target:
              entity_id: !input screen_control

  - alias: üîÅ Maintenance and notification
    choose:
      - conditions:
          - condition: trigger
            id: Restart device
          - condition: time
            weekday:
              - sat
          - condition: state
            entity_id: !input presence_sensor
            state: "off"
        sequence:
          - service: button.press
            target:
              entity_id: !input restart_button

      - conditions:
          - condition: trigger
            id: Device unavailable notification
        sequence:
          - service: notify.mobile_app
            data:
              title: !input notify_title
              message: !input notify_message
            target:
              device_id: !input notify_device
