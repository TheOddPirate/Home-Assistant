blueprint:
  name: 📱 Tablet Maintenance & Control
  description: >-
    Automates battery management, screen control based on presence, optional scheduled restarts, 
    and offline device notifications for wall-mounted tablets using Fully Kiosk Browser or BrowserMod.
  domain: automation
  input:
    battery_sensor:
      name: 🔋 Battery Level Sensor
      description: The sensor that reports the tablet’s battery level.
      selector:
        entity:
          domain: sensor
          integration: fully_kiosk
    charger_switch:
      name: 🔌 Charger Switch
      description: The switch that controls charging for the tablet.
      selector:
        entity:
          domain: switch
    screen_entity:
      name: 💡 Screen Switch/Light
      description: "The switch/light entity used to turn the screen on or off."
      selector:
        entity:
          domain:
            - switch
            - light
    presence_sensor:
      name: 🚶 Presence Sensor
      description: The binary sensor that detects presence in the room.
      selector:
        entity:
          domain: binary_sensor
    restart_button:
      name: 🔁 Restart Button (Optional)
      description: Button entity to restart the tablet (leave empty to disable).
      default: none
      selector:
        entity:
          domain: button
    min_battery:
      name: Minimum Battery Percentage
      description: "Charging will resume below this level. Default 35."
      default: 35
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
    max_battery:
      name: Maximum Battery Percentage
      description: "Charging will stop above this level. Default 75."
      default: 75
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
    restart_time:
      name: ⏰ Restart Time (optional)
      description: What time of day the tablet should restart (e.g. 03:00:00). Leave empty to disable.
      default: ""
      selector:
        time: {}
    restart_weekdays:
      name: 📅 Restart Days (optional)
      description: Select one or more days for restart to occur. Leave empty to disable restarts.
      default: []
      selector:
        select:
          multiple: true
          options:
            - value: mon
              label: Monday
            - value: tue
              label: Tuesday
            - value: wed
              label: Wednesday
            - value: thu
              label: Thursday
            - value: fri
              label: Friday
            - value: sat
              label: Saturday
            - value: sun
              label: Sunday
    notify_target:
      name: 📲 Notification Target (optional)
      description: The `notify.` service for the phone app (e.g. notify.mobile_app_pixel) .
      default: none
      selector:
        device:
          filter:
            - integration: mobile_app
    notify_title:
      name: 🔔 Notification Title (optional)
      description: Custom notification title. `[devicename]` will be replaced with device's friendly name.
      default: Tablet offline
      selector:
        text:
    notify_message:
      name: 📝 Notification Message (optional)
      description: Custom notification message. `[devicename]` will be replaced with device's friendly name.
      default: The tablet [devicename] is offline. Please check its power and network status.
      selector:
        text:

mode: queued
max: 10
trigger:
  - platform: time_pattern
    minutes: "/15"
    id: battery_check

  - platform: state
    entity_id: !input presence_sensor
    from: "on"
    to: "off"
    for: "00:00:30"
    id: screen_off

  - platform: state
    entity_id: !input presence_sensor
    from: "off"
    to: "on"
    id: screen_on

  - platform: template
    id: restart_device
    value_template: >
      {% set t = states('sensor.time') %}
      {% set restart = inputs.restart_time %}
      {{ t == (restart or 'invalid')[:5] }}

  - platform: state
    entity_id: !input screen_entity
    to: unavailable
    for: "00:10:00"
    id: device_unavailable

condition: []
action:
  - variables:
      message_title: !input notify_title
      message_text: !input notify_message
      notify_device: !input notify_target
      notify_service: |
        {% if (notify_device != none and notify_device != '' )  %}
          notify.mobile_app_{{ device_attr(notify_device, "name") | slugify }}
        {% endif %}
      devicename: "{{ state_attr(trigger.event.data.entity_id, 'friendly_name') }}"
  - choose:
      # Battery control
      - conditions:
          - condition: trigger
            id: battery_check
          - condition: numeric_state
            entity_id: !input battery_sensor
            above: !input max_battery
          - condition: state
            entity_id: !input charger_switch
            state: "on"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input charger_switch
      - conditions:
          - condition: trigger
            id: battery_check
          - condition: numeric_state
            entity_id: !input battery_sensor
            below: !input min_battery
          - condition: state
            entity_id: !input charger_switch
            state: "off"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input charger_switch

      # Screen off
      - conditions:
          - condition: trigger
            id: screen_off
          - condition: state
            entity_id: !input screen_entity
            state: "on"
          - condition: state
            entity_id: !input presence_sensor
            state: "off"
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id: !input screen_entity

      # Screen on
      - conditions:
          - condition: trigger
            id: screen_on
          - condition: state
            entity_id: !input screen_entity
            state: "off"
          - condition: state
            entity_id: !input presence_sensor
            state: "on"
        sequence:
          - service: homeassistant.turn_on
            target:
              entity_id: !input screen_entity

      # Restart tablet (if enabled and no presence)
      - conditions:
          - condition: trigger
            id: restart_device
          - condition: template
            value_template: >
              {% set today = now().strftime('%a') | lower %}
              {{ today[:3] in inputs.restart_weekdays }}
          - condition: state
            entity_id: !input presence_sensor
            state: "off"
          - condition: template
            value_template: "{{ inputs.restart_button != none and  inputs.restart_button != '' }}"
        sequence:
          - service: button.press
            target:
              entity_id: !input restart_button

      # Notify when device is unavailable
      - conditions:
          - condition: trigger
            id: device_unavailable
          - condition: template
            value_template: "{{ notify_service != none and notify_service != '' }}"
        sequence:
          - service: "{{ notify_service }}"
            data:
              title:  "{{ states('message_title').state | replace('[devicename]', 'devicename') }}"
              message: "{{  states('message_text').state | replace('[devicename]', 'devicename') }}"
             
