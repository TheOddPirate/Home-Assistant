blueprint:
  name: Wake-up light alarm with sunrise effect (multi-light)
  description: >
    Credits to https://community.home-assistant.io/t/wake-up-light-alarm-with-sunrise-effect/255193
    for the original blueprint, this is just a small edit to support multiple lights

    A wake-up light alarm with a brightness and color temperature sunrise effect.
    Supports multiple lights. Note: Requires date_time_iso sensor in configuration,
    not manually executable!
  domain: automation
  input:
    light_entities:
      name: Wake-up lights
      description: The lights to control. Turning any off during the sunrise will keep it off.
      selector:
        entity:
          multiple: true
          domain: light    
    timestamp_sensor:
      name: Alarm timestamp sensor
      description: "Sensor with timestamp of next alarm with device_class: timestamp"
      default: none
      selector:
        entity:
          device_class: timestamp
    manual_time:
      name: Manual alarm time
      description: Time to trigger alarm every day if timestamp sensor is not set.
      default: '7:00:00'
      selector:
        time: {}
    check_entity:
      name: Additional entity to check before sunrise is triggered
      description: If set, checks if entity is 'on' or 'home' before triggering.
      default: none
      selector:
        entity: {}
    sunrise_duration:
      name: Sunrise duration
      description: Minutes before the timestamp to start the sunrise.
      default: 25
      selector:
        number:
          min: 5
          max: 60
          step: 5
          unit_of_measurement: min
    start_brightness:
      name: Minimum brightness
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
    end_brightness:
      name: Maximum brightness
      default: 254
      selector:
        number:
          min: 5
          max: 255
          step: 1
    min_mired:
      name: Minimum color temperature
      default: 0
      selector:
        number:
          min: 0
          max: 500
          step: 5
          unit_of_measurement: mired
    pre_sunrise_actions:
      name: Pre-sunrise actions
      default: []
      selector:
        action: {}
    post_sunrise_actions:
      name: Post-sunrise actions
      default: []
      selector:
        action: {}

variables:
  lights: !input light_entities
  sensor: !input timestamp_sensor
  sunrise_duration: !input sunrise_duration
  start_brightness: !input start_brightness
  end_brightness: !input end_brightness
  manual_time: !input manual_time
  seconds: '{{ float(sunrise_duration) * 60 }}'
  range_brightness: '{{ float(end_brightness) - float(start_brightness) }}'
  min_mired: !input min_mired
  check_entity: !input check_entity
  tick_time: '{{ float(seconds) / float(range_brightness) }}'

trigger:
  - platform: time_pattern
    minutes: '*'

condition: []

action:
  - wait_template: >
      {{ sensor == 'none' or as_timestamp(states(sensor), None) != None }}
  - wait_template: >
      {{ 0 < as_timestamp(states(sensor) if sensor != 'none' else states('sensor.date') ~ ' ' ~ manual_time) - as_timestamp(states('sensor.date_time_iso')) <= float(seconds)
         and states(check_entity) in ['unknown', 'on', 'home'] }}
  - choose: []
    default: !input pre_sunrise_actions

  - condition: template
    value_template: >
      {{ sensor == 'none' or as_timestamp(states(sensor), None) != None }}
  - condition: template
    value_template: >
      {{ 0 < as_timestamp(states(sensor) if sensor != 'none' else states('sensor.date') ~ ' ' ~ manual_time) - as_timestamp(now()) <= float(seconds)
         and states(check_entity) in ['unknown', 'on', 'home'] }}

  - repeat:
      for_each: '{{ lights }}'
      sequence:
        - choose:
            - conditions: "{{ state_attr(repeat.item, 'min_mireds') != None }}"
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: '{{ repeat.item }}'
                    brightness: '{{ start_brightness }}'
                    color_temp: '{{ state_attr(repeat.item, 'max_mireds') }}'
          default:
            - service: light.turn_on
              data:
                entity_id: '{{ repeat.item }}'
                brightness: '{{ start_brightness }}'

  - repeat:
      while:
        - "{{ sensor == 'none' or as_timestamp(states(sensor), None) != None }}"
        - "{{ 0 < as_timestamp(states(sensor) if sensor != 'none' else states('sensor.date') ~ ' ' ~ manual_time) - as_timestamp(now()) <= float(seconds) }}"
      sequence:
        - delay: "{{ tick_time }}"
        - repeat:
            for_each: '{{ lights }}'
            sequence:
              - choose:
                  - conditions:
                      - "{{ state_attr(repeat.item, 'brightness') | int(0) < end_brightness | int }}"
                    sequence:
                      - choose:
                          - conditions: "{{ state_attr(repeat.item, 'min_mireds') != None }}"
                            sequence:
                              - service: light.turn_on
                                data:
                                  entity_id: '{{ repeat.item }}'
                                  brightness: >
                                    {{ (float(end_brightness) - (float(range_brightness) * (as_timestamp(states(sensor) if sensor != 'none' else states('sensor.date') ~ ' ' ~ manual_time) - as_timestamp(now())) / float(seconds))) | int(0) }}
                                  color_temp: >
                                    {{ (float([state_attr(repeat.item, 'min_mireds')|int(0), min_mired|int(0)]|max) + (float(state_attr(repeat.item, 'max_mireds')) - float([state_attr(repeat.item, 'min_mireds')|int(0), min_mired|int(0)]|max)) * ((as_timestamp(states(sensor) if sensor != 'none' else states('sensor.date') ~ ' ' ~ manual_time) - as_timestamp(now())) / float(seconds))) | int(0) }}
                          default:
                            - service: light.turn_on
                              data:
                                entity_id: '{{ repeat.item }}'
                                brightness: >
                                  {{ (float(end_brightness) - (float(range_brightness) * (as_timestamp(states(sensor) if sensor != 'none' else states('sensor.date') ~ ' ' ~ manual_time) - as_timestamp(now())) / float(seconds))) | int(0) }}

  - choose: []
    default: !input post_sunrise_actions

mode: single
max_exceeded: silent
